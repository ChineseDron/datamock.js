// Generated by CoffeeScript 1.4.0
(function() {
  var attribSel, emailDomains, emailNames, emailTLD, firstNames, genEmail, genName, lastNames, n, randChoice;

  firstNames = ["James", "John", "Robert", "Michael", "William", "David", "Richard", "Charles", "Joseph", "Thomas", "Mary", "Patricia", "Linda", "Barbara", "Elizabeth", "Jennifer", "Maria", "Susan", "Margaret", "Dorothy"];

  lastNames = ["Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor", "Anderson", "Thomas", "Jackson", "White", "Harris", "Martin", "Thompson", "Garcia", "Martinez", "Robinson"];

  emailNames = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = firstNames.length; _i < _len; _i++) {
      n = firstNames[_i];
      _results.push(n.toLowerCase());
    }
    return _results;
  })();

  emailDomains = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = lastNames.length; _i < _len; _i++) {
      n = lastNames[_i];
      _results.push(n.toLowerCase());
    }
    return _results;
  })();

  emailTLD = ["org", "com", "net"];

  randChoice = function(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  };

  genName = function() {
    return "" + (randChoice(firstNames)) + " " + (randChoice(lastNames));
  };

  genEmail = function() {
    return "" + (randChoice(emailNames)) + "@" + (randChoice(emailDomains)) + "." + (randChoice(emailTLD));
  };

  attribSel = function($sel, sel) {
    sel = "[" + sel + "]";
    if ($sel.is(sel)) {
      return $sel.add($sel.find(sel));
    } else {
      return $sel = $sel.find(sel);
    }
  };

  $.fn.datamock = function() {
    return $(this).each(function() {
      var id;
      attribSel($(this), 'data-mock-clone').each(function() {
        var $el, $parent, clone, i, _i, _ref, _results;
        $el = $(this);
        clone = parseInt($el.data('mock-clone'), 10);
        $parent = $el.parent();
        $el.data('mock-id', 1);
        _results = [];
        for (i = _i = 2, _ref = clone + 1; 2 <= _ref ? _i < _ref : _i > _ref; i = 2 <= _ref ? ++_i : --_i) {
          _results.push($parent.append($el.clone().data('mock-id', i)));
        }
        return _results;
      });
      id = 1;
      attribSel($(this), 'data-mock').each(function() {
        var $el, text;
        $el = $(this);
        switch ($el.data('mock')) {
          case 'id':
            text = $el.closest('[data-mock-clone]').data('mock-id');
            break;
          case 'name':
            text = genName();
            break;
          case 'email':
            text = genEmail();
        }
        return $el.text(text);
      });
      attribSel($(this), 'data-mock-choices').each(function() {
        var $el;
        $el = $(this);
        return $el.text(randChoice($el.data('mock-choices').split(',')));
      });
      return attribSel($(this), 'data-mock-choice').each(function() {
        var $el, $sel, choiceSel;
        $el = $(this);
        choiceSel = "[data-mock-choice='" + ($el.data('mock-choice')) + "']";
        $sel = $el.add($el.siblings(choiceSel));
        $el = $sel.eq(Math.floor(Math.random() * $sel.size()));
        return $el.siblings(choiceSel).remove();
      });
    });
  };

}).call(this);
